/* Acquires LOCK, sleeping until it becomes available if
   necessary.  The lock must not already be held by the current
   thread.

   This function may sleep, so it must not be called within an
   interrupt handler.  This function may be called with
   interrupts disabled, but interrupts will be turned back on if
   we need to sleep. */
void
lock_acquire (struct lock *lock)
{
  ASSERT (lock != NULL);
  ASSERT (!intr_context ());
  ASSERT (!lock_held_by_current_thread (lock));
	
  struct thread* t = thread_current();
  if (lock->holder != NULL && t->priority > lock->holder->priority) {
    lock->holder->priority_donate = lock->holder->priority;
    lock->holder->priority = t->priority;
  }

  sema_down (&lock->semaphore);
  lock->holder = thread_current ();
}

/* Releases LOCK, which must be owned by the current thread.

   An interrupt handler cannot acquire a lock, so it does not
   make sense to try to release a lock within an interrupt
   handler. */
void
lock_release (struct lock *lock) 
{
  ASSERT (lock != NULL);
  ASSERT (lock_held_by_current_thread (lock));

  // *** las siguientes 4 lÃ­neas son nuevas:
  if(lock->holder->priority_donate > 0) {
    lock->holder->priority = lock->holder->priority_donate;
    lock->holder->priority_donate = 0; // la sig. vez que haces lock, piensa que sigues en la prioridad anterior
  }

  lock->holder = NULL;
  sema_up (&lock->semaphore);
}

